name: Backend CI/CD with Docker and EKS

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.12'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  docker:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      - name: Extract version tag
        run: |
          echo "VERSION_TAG=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "Extracted version tag: ${{ env.VERSION_TAG }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY_URI }}/webtest:${{ env.VERSION_TAG }} .
          docker push ${{ secrets.ECR_REPOSITORY_URI }}/webtest:${{ env.VERSION_TAG }}

  deploy:
    needs: [docker]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Deploy Applications
        run: |
          # Ensure directories exist
          mkdir -p helm/apps helm/backend

          # Create values override file for apps chart
          cat > helm/apps/values.yaml << EOF
          repoURL: https://github.com/AWS-Cloud-FinalProject/backend.git
          targetRevision: yong
          backend:
            image:
              repository: ${{ secrets.ECR_REPOSITORY_URI }}/webtest
              tag: ${{ env.VERSION_TAG }}
            
            database:
              host: "${{ secrets.DB_HOST }}"
              user: "${{ secrets.DB_USER }}"
              password: "${{ secrets.DB_PASSWORD }}"
              name: "${{ secrets.DB_NAME }}"
              
            aws:
              region: "${{ secrets.AWS_REGION }}"
              accessKeyId: "${{ secrets.AWS_ACCESS_KEY_ID }}"
              secretAccessKey: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
              
            cognito:
              userPoolId: "${{ secrets.COGNITO_USER_POOL }}"
              clientId: "${{ secrets.COGNITO_CLIENT_ID }}"
          EOF

          # Create values file for backend chart
          cat > helm/backend/values.yaml << EOF
          image:
            repository: ${{ secrets.ECR_REPOSITORY_URI }}/webtest
            tag: ${{ env.VERSION_TAG }}
            pullPolicy: Always

          database:
            host: "${{ secrets.DB_HOST }}"
            user: "${{ secrets.DB_USER }}"
            password: "${{ secrets.DB_PASSWORD }}"
            name: "${{ secrets.DB_NAME }}"
            
          aws:
            region: "${{ secrets.AWS_REGION }}"
            accessKeyId: "${{ secrets.AWS_ACCESS_KEY_ID }}"
            secretAccessKey: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            
          cognito:
            userPoolId: "${{ secrets.COGNITO_USER_POOL }}"
            clientId: "${{ secrets.COGNITO_CLIENT_ID }}"

          service:
            type: ClusterIP
            port: 8000
          EOF

      - name: Apply Helm Chart
        run: |
          # Apply the apps chart using Helm with debug output
          helm upgrade --install backend-apps helm/apps -n argocd --create-namespace --debug

      - name: Cleanup old ReplicaSets
        run: |
          # Get all ReplicaSets except the latest one and delete them
          kubectl get replicaset -l app=backend -o name | tail -n +2 | xargs -r kubectl delete
