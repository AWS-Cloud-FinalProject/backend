name: Build and Push to ECR

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    # 1. 코드 체크아웃
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Helm 설치
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    # 3. Python 설정
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.12'

    # 4. Python 의존성 설치
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # 5. AWS 자격 증명 설정
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # 6. ECR 로그인
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # 7. Update kubeconfig for EKS
    - name: Update kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
        kubectl config current-context
        echo "kubeconfig updated successfully"

    # 8. 버전 태그 추출
    - name: Extract version tag
      run: |
        echo "VERSION_TAG=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        echo "Extracted version tag: ${{ env.VERSION_TAG }}"

    # 9. Docker 이미지 빌드
    - name: Build Docker image
      run: |
        echo "Building Docker image with tag: ${{ env.VERSION_TAG }}"
        docker build -t ${{ secrets.ECR_REPOSITORY_URI }}:${{ env.VERSION_TAG }} .
        echo "Docker build completed"

    # 10. 이미지 태그 설정
    - name: Tag Docker image
      run: |
        echo "Tagging image as latest"
        docker tag ${{ secrets.ECR_REPOSITORY_URI }}:${{ env.VERSION_TAG }} ${{ secrets.ECR_REPOSITORY_URI }}:latest
        echo "Image tagged successfully"

    # 11. ECR에 이미지 푸시
    - name: Push Docker image to ECR
      run: |
        echo "Pushing version tag: ${{ env.VERSION_TAG }}"
        docker push ${{ secrets.ECR_REPOSITORY_URI }}:${{ env.VERSION_TAG }}
        echo "Pushing latest tag"
        docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest
        echo "Image push completed"

    # 12. values-generated.yaml 파일 생성
    - name: Create values-generated.yaml
      run: |
        echo "Creating values-generated.yaml with image tag: ${{ env.VERSION_TAG }}"
        cat > k8s/helm/values-generated.yaml <<EOF
        image:
          repository: ${{ secrets.ECR_REPOSITORY_URI }}
          tag: ${{ env.VERSION_TAG }}
        
        # 데이터베이스 연결 정보
        database:
          host: "${{ secrets.DB_HOST }}"
          user: "${{ secrets.DB_USER }}"
          password: "${{ secrets.DB_PASSWORD }}"
          name: "${{ secrets.DB_NAME }}"
          
        # AWS 설정
        aws:
          region: "${{ secrets.AWS_REGION }}"
          accessKeyId: "${{ secrets.AWS_ACCESS_KEY_ID }}"
          secretAccessKey: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          
        # Cognito 설정
        cognito:
          userPoolId: "${{ secrets.COGNITO_USER_POOL }}"
          clientId: "${{ secrets.COGNITO_CLIENT_ID }}"
        EOF
        echo "values-generated.yaml created successfully"

    # 13. Helm 차트 검증
    - name: Validate Helm chart
      run: |
        echo "Validating Helm chart"
        helm lint ./k8s/helm
        echo "Helm chart validation completed"

    # 14. Helm으로 배포
    - name: Deploy with Helm
      run: |
        echo "Deploying to Kubernetes with Helm"
        helm upgrade --install backend-service ./k8s/helm \
          -f k8s/helm/values.yaml \
          -f k8s/helm/values-generated.yaml \
          --namespace default
        echo "Helm deployment completed"

    # 15. 배포 상태 확인
    - name: Check deployment status
      run: |
        echo "Checking deployment status"
        helm status backend-service
        echo "Deployment status check completed"
    