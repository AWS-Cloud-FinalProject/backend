name: Backend CI/CD with GitOps

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'README.md'

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.12'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  version:
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.generate_version.outputs.NEW_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      - name: Generate version
        id: generate_version
        run: |
          # Get the latest tag
          git fetch --tags
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")

          # Extract version numbers
          MAJOR=$(echo $LATEST_TAG | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\1/')
          MINOR=$(echo $LATEST_TAG | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\2/')
          PATCH=$(echo $LATEST_TAG | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\3/')

          # Get the commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # Check commit message for version bump keywords
          if echo "$COMMIT_MSG" | grep -iE "BREAKING CHANGE|major" > /dev/null; then
            echo "Major version bump detected"
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif echo "$COMMIT_MSG" | grep -iE "feat|minor" > /dev/null; then
            echo "Minor version bump detected"
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            echo "Patch version bump detected"
            PATCH=$((PATCH + 1))
          fi

          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "Version will be: $NEW_TAG"
          echo "Commit message: $COMMIT_MSG"

      - name: Create and push Git tag
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git tag -a ${{ steps.generate_version.outputs.NEW_TAG }} -m "Release ${{ steps.generate_version.outputs.NEW_TAG }}"
          git push origin ${{ steps.generate_version.outputs.NEW_TAG }}

  docker:
    needs: [build, version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        run: |
          # Build and tag images
          docker build -t ${{ secrets.ECR_REPOSITORY_URI }}/backend:${{ needs.version.outputs.version_tag }} .
          docker tag ${{ secrets.ECR_REPOSITORY_URI }}/backend:${{ needs.version.outputs.version_tag }} ${{ secrets.ECR_REPOSITORY_URI }}/backend:latest

          # Push images
          docker push ${{ secrets.ECR_REPOSITORY_URI }}/backend:${{ needs.version.outputs.version_tag }}
          docker push ${{ secrets.ECR_REPOSITORY_URI }}/backend:latest

  update-helm-values:
    needs: [docker, version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      - name: Update Helm values
        run: |
          # Ensure Helm chart directory exists
          mkdir -p helm/backend
          
          # Create or update values.yaml with all values
          cat > helm/backend/values.yaml << EOF
          replicaCount: 3

          image:
            repository: "${{ secrets.ECR_REPOSITORY_URI }}/backend"
            tag: "${{ needs.version.outputs.version_tag }}"
            pullPolicy: Always

          service:
            type: ClusterIP
            port: 8000
          EOF

      - name: Check and commit changes if needed
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          if git diff --quiet helm/backend/values.yaml; then
            echo "No changes to commit"
          else
            git add helm/backend/values.yaml
            git commit -m "edit: values.yaml"
          fi

      
      - name: Pull latest changes
        run: git pull origin master

      - name: Commit and push changes
        run: |
          git add helm/backend/values.yaml
          git commit -m "Update backend image to ${{ needs.version.outputs.new_tag }}"
          git push