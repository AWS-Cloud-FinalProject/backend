name: Python CI/CD with Docker and EKS

on:
  push:
    branches:
      - yong
    tags:
      - 'v*.*.*'  # Git 태그가 푸시될 때만 실행

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python "3.12"
      uses: actions/setup-python@v3
      with:
        python-version: '3.12' 

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt 
    
    - name: Extract Version Tag
      run: |
        echo "GITHUB_REF: $GITHUB_REF"
        VERSION_TAG=$(echo $GITHUB_REF | sed 's|refs/tags/v||')
        echo "Extracted VERSION_TAG: $VERSION_TAG"
        echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV

    - name: Build Docker image
      run: |
        echo "Building Docker image with tag: $VERSION_TAG"

        docker build -t ${{ secrets.ECR_REPOSITORY_URI }}:$VERSION_TAG .  # 버전 태그 기반 빌드,도커 이미지를 빌드하고 ECR URI에 태그 지정
        docker tag ${{ secrets.ECR_REPOSITORY_URI }}:$VERSION_TAG ${{ secrets.ECR_REPOSITORY_URI }}:latest  # latest 태그 추가

    - name: Configure AWS Credentials  # AWS 자격 증명 설정 (필수)
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1  # ECR에 로그인

    - name: Print version and repository URI
      run: |
        echo "Version Tag: $VERSION_TAG"
        echo "Repository URI: ${{ secrets.ECR_REPOSITORY_URI }}"
    
    - name: Push Docker image to ECR
      run: |
        # ECR에 빌드된 이미지를 푸시
        echo "Pushing image with tag: $VERSION_TAG"
        echo "Pushing image with repository URI: ${{ secrets.ECR_REPOSITORY_URI }}:${VERSION_TAG}"
        docker push ${{ secrets.ECR_REPOSITORY_URI }}:${VERSION_TAG}  # 버전 태그 푸시
        docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest  # latest 푸시

  deploy:
    runs-on: ubuntu-latest
    needs: build  # 빌드 작업이 끝난 후 배포 작업 실행

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS CLI
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set region ${{ secrets.AWS_REGION }}

    - name: Update kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}  # EKS 클러스터 이름을 이용해 kubeconfig 업데이트

    - name: Deploy backend to EKS
      env:
        ECR_REPOSITORY_URI: ${{ secrets.ECR_REPOSITORY_URI }}
        VERSION_TAG: ${{ github.ref_name }}
      run: |
        # Debug information
        echo "ECR_REPOSITORY_URI: ${ECR_REPOSITORY_URI}"
        echo "VERSION_TAG: ${VERSION_TAG}"
        
        ls -l k8s/  # 디렉토리 내용 확인
        # envsubst를 사용하여 환경 변수를 k8s/backend-deployment.yaml 파일에 삽입하고 kubectl로 적용
        envsubst < k8s/backend-deployment.yaml | kubectl apply -f -
        kubectl apply -f k8s/backend-service.yaml

    # 배포 상태 확인
    - name: Wait for rollout to finish
      run: |
        kubectl rollout status deployment/backend-deployment